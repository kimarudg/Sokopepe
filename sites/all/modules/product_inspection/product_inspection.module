<?php
function product_inspection_menu(){
$items = array();




 $items['admin/inspections']  = array(
'title' => t('Product Inspections'),
'page callback' => 'product_inspections',
 'access arguments' => array('access content'),
//'type' => MENU_LOCAL_TASK, //rendered as tab
'type' => MENU_CALLBACK, // rendered as page
 );
 



 
 $items['admin/editinspection']  = array(
'title' => t('Edit Inspection'),
'page callback' => 'editinspection_page',
 'access arguments' => array('access content'),
'type' => MENU_CALLBACK, //rendered as tab
//'type' => MENU_CALLBACK, // rendered as page
 );
 
 $items['admin/deleteinspection']  = array(
'title' => t('Delete Inspection'),
'page callback' => 'deleteinspection_page',
 'access arguments' => array('access content'),
'type' => MENU_CALLBACK, //rendered as tab
//'type' => MENU_CALLBACK, // rendered as page
 );
 
 $items['admin/cropinspection']  = array(
'title' => t('Crop Inspections'),
'page callback' => 'cropinspection_pages',
 'access arguments' => array('access content'),
'type' => MENU_CALLBACK, //rendered as tab
//'type' => MENU_CALLBACK, // rendered as page
 );

 


 
return $items;
}



function product_inspections() {
   // in this function, we shall select all products in the uc_products table, 
   //and the user will be presented with these products.
   //Basically, users will just select the products and specify the quantity.
	
	
	$content = drupal_get_form('product_inspection_form');
	//$form = drupal_get_form('order_allocation_form');
    //$content = order_allocation_form('order_allocation_form');
	//create_table();
    return $content;
}
function cropinspection_pages ()
{
	
	$content = cropinspection_page();
	return $content;
}
function cropinspection_page ()
{
	$res = drupal_get_form('crop_inspection_form');
	return $res;
}


function crop_inspection_form ($inspectionform, &$form_state)
{
		
	$sql = "SELECT node.nid,  uc_products.model, node.title FROM uc_products INNER JOIN node on uc_products.nid=node.nid";
	$db_result = db_query($sql);
	foreach ($db_result as $record) 
	{
		$list[$record->nid] = $record->title;
				
	}
//create a select list of products in the order
  $inspectionform['product'] = array(
 '#type' => 'select',
 '#title' => t('Product'),
 '#options' => $list,
 '#cols' => 10,
  '#multiple' => FALSE,
 );
	
	
	$inspectionlist = array();
	$sql = "SELECT inspection_id, inspection_name FROM inspection";
	$db_result = db_query($sql);
	foreach ($db_result as $record) 
	{
		$inspectionlist[$record->inspection_id] = $record->inspection_name;
				
	}
//create a select list of inspections
  $inspectionform['inspection'] = array(
 '#type' => 'select',  
 '#title' => t('Inspection'),
 '#options' => $inspectionlist,
 '#cols' => 10,
  '#multiple' => FALSE,
 );

$inspectionform['maxvalue'] = array(
 '#type' => 'textfield',   
 '#title' => t('Maximum Value'),
 );
 
 $inspectionform['minvalue'] = array(
 '#type' => 'textfield',  
 '#title' => t('Minimum Value'),
 );
 
 
 $inspectionform['recvalue'] = array(
 '#type' => 'textfield',  
 '#title' => t('Recommended Value'),
 );
 
 
 $operationlist['more than'] = 'More than';
 $operationlist['less than'] = 'Less than';
 $inspectionform['operand'] = array(
 '#type' => 'select',
 '#title' => t('Operand'),
 '#options' => $operationlist,
 '#cols' => 10,
 '#multiple' => FALSE,
 );

 
  //submit button 
  $inspectionform['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  
   $inspectionform['dets'] = array(
      '#type' => 'fieldset',
      '#title' => t('Crop Inspections'),
      '#description' => t(getcropinspections()),
    );
  
 
return $inspectionform;	
}

function product_inspection_form($form, &$form_state) {
 
 
 $form['inspection'] = array(
 '#type' => 'textfield',
 '#title' => t('Inspection'),
 );
 
 $form['body'] = array(
 '#type' => 'textfield',
 '#title' => t('Body'),
 );
 
 $form['remarks'] = array(
 '#type' => 'textfield',
 '#title' => t('Remarks'),
 );
 
  //submit button 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  
  $form['dets'] = array(
      '#type' => 'fieldset',
      '#title' => t('Inspections For Products'),
      '#description' => t(getallinspections()),
    );
	
	/**/
  
  return $form;
}

function edit_product_inspection_form($form, &$form_state) {
 
 $sql = "SELECT * FROM inspection WHERE inspection_id =".arg(2);
	$db_result = db_query($sql);
	foreach ($db_result as $db_record) 
	{
		 $editform['inspectionid'] = array(
		 '#type' => 'hidden',
		 '#default_value' => $db_record->inspection_id,
		 '#title' => t('Inspection'),
		 );
		 
		 $editform['inspection'] = array(
		 '#type' => 'textfield',
		 '#default_value' =>  $db_record->inspection_name,
		 '#title' => t('Inspection'),
		 );
		 
		 $editform['body'] = array(
		 '#type' => 'textfield',
		 '#default_value' =>  $db_record->body,
		 '#title' => t('Body'),
		 );
		 
		 $editform['remarks'] = array(  
		 '#type' => 'textfield',
		 '#default_value' =>  $db_record->remarks,
		 '#title' => t('Remarks'),
		 );
		 
		  //submit button 
		  $editform['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Save'),
		  );
	}
  
  $editform['dets'] = array(
      '#type' => 'fieldset',
      '#title' => t('Inspections For Products'),
      '#description' => t(getallinspections()),
    );
	
	/**/
  
  return $editform;
}
function crop_inspection_edit_form ($form, &$form_state) 
{
	/*
	//get the items in the insopection 
	$produ_isp_sql = "SELECT pi.operator, pi.product_inspectionid, pi.rec_value, pi.min_value, pi.max_value, pi.inspectionID, pi.productid, n.nid, n.title, i.inspection_id, i.inspection_name FROM product_inspection INNER JOIN inspection i ON i.inspection_id = pi.inspectionID LEFT OUTER JOIN node n on n.nid=pi.productid WHERE pi.product_inspectionid = ".arg(2);
	$db_pi_result = db_query($produ_isp_sql);
	drupal_set_message($produ_isp_sql);
	foreach ($db_pi_result as $res)
	{
		$inspectionid = $res->inspectionID;
		$cropinspectionid = $res->inspectionID;
	}
	*/
	
	//CREATE SQL
	$produ_isp_sql = "SELECT pi.operator, pi.product_inspectionid, pi.rec_value, pi.min_value, pi.max_value, pi.inspectionID, pi.productid, n.nid, n.title, i.inspection_id, i.inspection_name FROM product_inspection pi INNER JOIN inspection i ON i.inspection_id = pi.inspectionID LEFT OUTER JOIN node n on n.nid=pi.productid WHERE pi.product_inspectionid = ".arg(2);
	$db_pi_result = db_query($produ_isp_sql);
	foreach ($db_pi_result as $res)
	{
		$default_product_inspectionid = $res->product_inspectionid;
		$default_product_inspection = $res->inspectionID;
		$default_product_crop = $res->nid;
		$default_product_max = $res->max_value;
		$default_product_min = $res->min_value;
		$default_product_rec = $res->rec_value;
		$default_product_operand = $res->operator;
	}
	
	$sql = "SELECT node.nid,  uc_products.model, node.title FROM uc_products INNER JOIN node on uc_products.nid=node.nid";
	$db_result = db_query($sql);
	foreach ($db_result as $record) 
	{
		$list[$record->nid] = $record->title;
				
	}
	//create a select list of products in the order
	  $inspectioneditform['product'] = array(
	 '#type' => 'select',
	 '#title' => t('Product'),
	 //'#default_value' => $db_pi_result->nid,
	 '#options' => $list,
	 '#cols' => 10,
	  '#multiple' => FALSE,
	 );
		
		
		$inspectionlist = array();
		$sql = "SELECT inspection_id, inspection_name FROM inspection";
		$db_result = db_query($sql);
		foreach ($db_result as $record) 
		{
			$inspectionlist[$record->inspection_id] = $record->inspection_name;
					
		}
	//create a select list of inspections
	  $inspectioneditform['inspection'] = array(
	 '#type' => 'select',  
	 '#title' => t('Inspection'),
	 '#options' => $inspectionlist,
	 '#default_value' => $default_product_inspection,
	 '#cols' => 10,
	  '#multiple' => FALSE,
	 );

	$inspectioneditform['maxvalue'] = array(
	 '#type' => 'textfield',
	 '#default_value' => $default_product_max,
	 '#title' => t('Maximum Value'),
	 );
	 
	 $inspectioneditform['minvalue'] = array(
	 '#type' => 'textfield',  
	 '#title' => t('Minimum Value'),
	 '#default_value' => $default_product_min,
	 );
	 
	 
	 $inspectioneditform['recvalue'] = array(
	 '#type' => 'textfield', 
	 '#default_value' => $default_product_rec,
	 '#title' => t('Recommended Value'),
	 );
	 
	 $inspectioneditform['inspid'] = array(
	 '#type' => 'hidden', 
	 '#default_value' => $default_product_inspectionid,
	 '#title' => t('Recommended Value'),
	 );
	 
	 
	 $operationlist['more than'] = 'More than';
	 $operationlist['less than'] = 'Less than';
	 $inspectioneditform['operand'] = array(
	 '#type' => 'select',
	 '#title' => t('Operand'),
	 '#default_value' => $default_product_operand,
	 '#options' => $operationlist,
	 '#cols' => 10,
	 '#multiple' => FALSE,
	 );

	 
	  //submit button 
	  $inspectioneditform['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	  );

	  
	   $inspectioneditform['dets'] = array(
		  '#type' => 'fieldset',
		  '#title' => t('Crop Inspections'),
		  '#description' => t(getcropinspections()),
		);
	  
	 
	return $inspectioneditform;	
  
}





function getallinspections()
{
global $user;

	$sql ="SELECT 
		 *
		FROM  inspection";
		$db_result = db_query($sql);
		
		$rows = array();
		 $header = array();
		 $header[] = 'Name';
		 $header[] = 'Body';
		 $header[] = 'Remarks';
		 $header[] = 'Operations';
		
		$row = array();
	foreach ($db_result as $record) 
	{
		 $row [] = array(
			  // output 1 cell in 1 row   l($node->title, 'node/'. $node->nid .'/edit'),
			  array('data' => $record->inspection_name), 
			   // third cell
			  array('data' => t($record->body)), 
			  array('data' => t($record->remarks)), 
			  // fifth cell  
			  array('data' => l('Remove', 'admin/deleteinspection/'.$record->inspection_id).' '.l('Edit', 'admin/editinspection/'.$record->inspection_id)) 
			); 
		//$amountallocated = $record->qty;
				
	}
	return theme('table', array('header' => $header, 'rows'=> $row));
}

function editinspection_page ()
{
	if (arg(3) == 'crop')
	{
		//drupal_set_message(arg(3));
		//return drupal_get_form('edit_product_inspection_form');
		return drupal_get_form('crop_inspection_edit_form');
		
	}
	else
	{
		return drupal_get_form('edit_product_inspection_form');
		
	}
	//drupal_goto('user/'.$user->uid.'/myproducts', array('external' => FALSE));
}

/*
function crop_inspection_edit()
{
	
	return drupal_get_form('crop_inspection_edit_form');	
} */

function deleteinspection_page()
{
	//global $user;
	$sql = "DELETE FROM inspection WHERE inspection_id=".arg(2);
	$db_result = db_query($sql);
	drupal_goto('admin/inspections', array('external' => FALSE));
}



// VALIDATIONS

function crop_inspection_form_validate($inspectionform, &$form_state) 
{
		//product   inspection  maxvalue  minvalue  recvalue  operand
		if(!is_numeric($form_state['values']['product'])|| empty($form_state['values']['product']))
		{
			form_set_error('product', t("Select a Product"));
		}
		elseif(!is_numeric($form_state['values']['inspection']) || empty($form_state['values']['inspection']))
		 {
			form_set_error('inspection', t("Select an inspection"));
		 }
		 elseif(!is_numeric($form_state['values']['maxvalue']) || empty($form_state['values']['maxvalue']))
		 {
			form_set_error('maxvalue', t("Maximum value must be entered and must be a number"));
		 }
		 elseif(!is_numeric($form_state['values']['minvalue']) || empty($form_state['values']['minvalue']))
		 {
			form_set_error('minvalue', t("Minimum value must be entered and must be a number"));
		 }
		 elseif(!empty($form_state['values']['recvalue']))
		 {
			if (!is_numeric($form_state['values']['recvalue']))
			{
				form_set_error('recvalue', t("Minimum value must be entered and must be a number"));
			}
			
		 }
}

//validate during editing
function crop_inspection_edit_form_validate($inspectionform, &$form_state) 
{
		//product   inspection  maxvalue  minvalue  recvalue  operand
		if(!is_numeric($form_state['values']['product'])|| empty($form_state['values']['product']))
		{
			form_set_error('product', t("Select a Product"));
		}
		elseif(!is_numeric($form_state['values']['inspection']) || empty($form_state['values']['inspection']))
		 {
			form_set_error('inspection', t("Select an inspection"));
		 }
		 elseif(!is_numeric($form_state['values']['maxvalue']) || empty($form_state['values']['maxvalue']))
		 {
			form_set_error('maxvalue', t("Maximum value must be entered and must be a number"));
		 }
		 elseif(!is_numeric($form_state['values']['minvalue']) || empty($form_state['values']['minvalue']))
		 {
			form_set_error('minvalue', t("Minimum value must be entered and must be a number"));
		 }
		 elseif(!empty($form_state['values']['recvalue']))
		 {
			if (!is_numeric($form_state['values']['recvalue']))
			{
				form_set_error('recvalue', t("Minimum value must be entered and must be a number"));
			}
			
		 }
}


function edit_product_inspection_form_validate($form, &$form_state) {
  //echo ($form_state['values']['quantity'] );
  
	 if($form_state['values']['inspection'] == '' || empty($form_state['values']['inspection']))
	 {
		form_set_error('inspection', t("Enter a valid Inspection Name"));
	 }
}

function product_inspection_form_validate($form, &$form_state) {
  //echo ($form_state['values']['quantity'] );
  
 if($form_state['values']['inspection'] == '' || empty($form_state['values']['inspection']))
 {
	form_set_error('inspection', t("Enter a valid Inspection Name"));
 }
}







//TABLE OF ALL PRODUCT INSPECTIONS
function getcropinspections()
{
		//Create a list of headers for your Html table 
		$header = array(
			array('data' => 'Product', 'field' => 'productid', 'sort' => 'asc'),
			array('data' => 'Inspection', 'field' => 'inspectionID'),
			array('data' => 'Max Value', 'field' => 'max_value'),
			array('data' => 'Min Value', 'field' => 'min_value'),
			array('data' => 'Recomended Value', 'field' => 'rec_value'),
			array('data' => 'Delimiter', 'field' => 'operator'),
			array('data' => 'Actions'),
			);

		//Create the Sql query. This uses various parts of Drupal 7's new DBTNG database abstraction layer.
		//product_inspectionid, productid, inspectionID, max_value, min_value, rec_value, operator
		$query = db_select('product_inspection', 'pi');
					$query->join('node', 'n', 'n.nid = pi.productid');
					$query->join('inspection', 'i', 'i.inspection_id = pi.inspectionID');
					//$query->extend('PagerDefault') 	//Pager Extender
					//	->limit(10);			//10 results per page
					$query->extend('TableSort')		//Sorting Extender
						->orderByHeader($header);//Field to sort on is picked from $header
					$query->fields ('pi', array (
						'productid',
						'inspectionID',
						'product_inspectionid',
						'max_value',
						'min_value',
						'rec_value',
						'operator',
					));
					
					$query->fields ('n', array ( 
						'nid',
						'title',
					));
					$query->fields ('i', array (
						'inspection_id',
						'inspection_name',
					));

		$results = $query
					->execute();

		$rows = array();	
		foreach ($results as $node) {
			$rows[] = array(
						'data' => array(
							  l($node->title, 'node/'. $node->nid),
							  $node->inspection_name,
							  $node->max_value,
							  $node->min_value,
							  $node->rec_value,
							  $node->operator, 
							  l('Edit', 'admin/editinspection/'.$node->product_inspectionid.'/crop').'   Remove'
						)
			);
		}

		//Theme the html table
		$html = theme('table', 
					array(
						'header' => $header,
						'rows'=>$rows,
						//'caption' => 'List of Crop Inspection',	//Optional Caption for the table
						'sticky' => TRUE,						//Optional to indicate whether the table headers should be sticky
						'empty' => 'No inspection created...',		//Optional empty text for the table if resultset is empty
					)
				);

		//Append pager
		$html .= theme('pager',
					array(
						'tags' => array()
					)
				);
				
		return ($html);
}

//SUBMISSIONS
function crop_inspection_form_submit($inspectionform, &$form_state) 
{
	//product   inspection  maxvalue  minvalue  recvalue  operand
	$SQL = "INSERT INTO product_inspection (productid, inspectionID, max_value, min_value, rec_value, operator) VALUES ('".$form_state['values']['product']."', '".$form_state['values']['inspection']."', '".$form_state['values']['maxvalue']."', '".$form_state['values']['minvalue']."', '".$form_state['values']['recvalue']."', '".$form_state['values']['operand']."')";
		
	db_query($SQL);
	drupal_set_message(t('Your Inspection has been saved.'));
}

//save teh edited crop inspection
// crop_inspection_edit_form  inspid
function crop_inspection_edit_form_submit($inspectionform, &$form_state) 
{
	//product   inspection  maxvalue  minvalue  recvalue  operand
	$SQL = "UPDATE product_inspection SET productid = '".$form_state['values']['product']."', inspectionID = '".$form_state['values']['inspection']."', max_value = '".$form_state['values']['maxvalue']."', min_value = '".$form_state['values']['minvalue']."', rec_value = '".$form_state['values']['recvalue']."', operator = '".$form_state['values']['operand']."' WHERE product_inspectionid ='".$form_state['values']['inspid']."'";
		
	db_query($SQL);
	drupal_set_message(t('Inspection Updated Successfully'));
}


function edit_product_inspection_form_submit($form, &$form_state)
{
	$SQL = "UPDATE inspection SET inspection_name ='".$form_state['values']['inspection']."', body='".$form_state['values']['body']."', remarks='".$form_state['values']['remarks']."' WHERE inspection_id='".$form_state['values']['inspectionid']."'";
	db_query($SQL);
	drupal_set_message(t('Your Inspection has been updated.'));
	drupal_goto('admin/inspections', array('external' => FALSE));
}

function product_inspection_form_submit($form, &$form_state) {
	//CHECK IF THE PRODUCT EXISTS
	//inspection body remarks
	$SQL = "INSERT INTO inspection (inspection_name, body, remarks) VALUES ('".$form_state['values']['inspection']."', '".$form_state['values']['body']."', '".$form_state['values']['remarks']."')";
		
	db_query($SQL);
	drupal_set_message(t('Your Inspection has been saved.'));
	//drupal_set_message(t('Amount allocated so far is '.get_allocated_amount($form_state['values']['product'])));
}

