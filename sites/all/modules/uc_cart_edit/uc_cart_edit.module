<?php
/**
 * @file
 * Adds the possibility to return from cart to the product form and change the selected options.
 */

/**
 * Implementation of hook_form_alter().
 */
function uc_cart_edit_form_alter(&$form, $form_state, $form_id) {
  if (strstr($form_id, 'uc_product_add_to_cart_form')) {
    if (isset($_GET['ciid'])) {
      // Extract cart item id from url.
      $cart_item_id = check_plain($_GET['ciid']);
      
      // Cart ID is needed for access validation.
      $cart_id = uc_cart_get_id();
      
      // Load cart item from database.
      $item = uc_cart_get_item($cart_item_id);     
            
      // Check if item is part of the active user's cart.
      if ($item->cart_id === $cart_id) {
        // Change default form item values to cart item values.
        // But only if form has not been submitted yet.
        if (!isset($form_state['values'])) {
          $form['qty']['#default_value'] = $item->qty;
          foreach ((array) $item->data['attributes'] as $aid => $option) {
            $form['attributes'][$aid]['#default_value'] = check_plain($option);
          }
        }
        
        // Add the cart item id to the form, so we can grab it during submit.
        $form['cart_item_id'] = array(
          '#type' => 'value',
          '#value' => $item->cart_item_id,
        );
        
        // Add a cancelation link to the add to cart form.
        $form['actions']['cancel'] = array(
          '#markup' => l(t('cancel'), 'cart'),
        );
        
        // Maybe we should update the submit button value to something that says "update".
        $form['actions']['submit']['#value'] = t('Save changes');
        
        // Prepend a callback before all submit functions.
        // This deletes the existing cart item. Before anything can be written to the database.
        $form['#submit'] = array_merge(array('_uc_cart_edit_delete_cart_item'), $form['#submit']);

        // Change action in case some error's occure.
        $form['#action'] = url('node/'. $item->nid, array('query' => array('ciid' => $item->cart_item_id)));
      }
    }
  }
}

/**
 * Implementation of hook_form_uc_cart_view_form_alter().
 *
 * Add an edit button for each product to the cart form.
 */
function uc_cart_edit_form_uc_cart_view_form_alter(&$form, &$form_state) {
  if (count($form['items'])) {
    // Add edit column to tapir table.
    $form['items']['#columns']['edit'] = array(
      'cell'   => t('edit'),
      'weight' => 5,
    );
    
    // Add edit link to all products.
    foreach (element_children($form['items']) as $key) {
      // Products will have a cart_item_id-element.
      // Other elements will either be line items or product kits.
      if (isset($form['items'][$key]['cart_item_id'])) {
        // Add a simple edit link with an additional parameter attached.
        // No need to perform a POST request, because cart item id, will be changed.
        $form['items'][$key]['edit'] = array(
          '#markup' => l(t('edit'), 'node/'. $form['items'][$key]['nid']['#value'], array('query' => array('ciid' => $form['items'][$key]['cart_item_id']['#value']))),
        );
      }
    }
  }
}

/**
 * Remove cart item from database, if cart_item_id is available.
 */
function _uc_cart_edit_delete_cart_item($form, &$form_state) {
  // If a cart item id is available, this is an edited product form.
  if (isset($form_state['values']['cart_item_id'])) {
    $cart_item_id = check_plain($form_state['values']['cart_item_id']);

    // Load cart item from database.
    $item = uc_cart_get_item($cart_item_id);
    
    // Delete cart item from database.
    // Now ubercart will create a new cart item.
    uc_cart_remove_item($item->nid, NULL, $item->data);
  }
}